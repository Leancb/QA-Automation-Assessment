name: CI

"on":
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CI: true

jobs:
  # =======================
  # API TESTS (CYPRESS)
  # =======================
  api_tests:
    name: API (Cypress)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: api-tests/package-lock.json

      - name: Install deps
        working-directory: api-tests
        run: npm ci
        env:
          CYPRESS_REQRES_API_KEY: ${{ secrets.REQRES_API_KEY }}

      - name: Run Cypress API tests
        working-directory: api-tests
        run: npx cypress run
        env:
          CYPRESS_REQRES_API_KEY: ${{ secrets.REQRES_API_KEY }}

      - name: Upload Cypress reports (API)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-api-reports
          path: |
            api-tests/cypress/reports/**
            api-tests/cypress/screenshots/**
          retention-days: 7

  # =======================
  # E2E TESTS (CYPRESS + CUCUMBER)
  # =======================
  e2e_tests:
    name: E2E Web (Cypress + Cucumber)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: e2e-tests/package-lock.json

      - name: Install deps
        working-directory: e2e-tests
        run: npm ci

      - name: Run Cypress E2E (Cucumber)
        working-directory: e2e-tests
        run: npx cypress run --config-file cypress.config.cjs

      - name: Upload Cypress reports (E2E)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-e2e-reports
          path: |
            e2e-tests/cypress/reports/**
            e2e-tests/cypress/screenshots/**
          retention-days: 7

  # =======================
  # MOBILE TESTS (APPIUM + ANDROID EMULATOR)
  # =======================
  mobile_tests:
    name: Mobile CI (Android)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      CI: true
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      ADB_INSTALL_TIMEOUT: '20'
      ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: '20'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      # Instala dependências do projeto mobile (ajuste se seu package.json estiver em outra pasta)
      - name: Install project deps (mobile)
        run: |
            if [ -d mobile-tests ] && [ -f mobile-tests/package.json ]; then
              cd mobile-tests && npm ci
            else
              # Se seus testes ficam na raiz, mantém npm ci na raiz
              npm ci
            fi

      # Sobe o emulador e executa seus testes no 'script'
      - name: Run emulator and tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: default
          arch: x86_64
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -no-audio -accel off -no-boot-anim -no-metrics
          disable-animations: true
          # Executa tudo em UMA shell; coleta artefatos ao final
          script: >
            bash -lc 'set -euo pipefail;
            # entra na subpasta se existir
            if [ -d mobile-tests ] && [ -f mobile-tests/package.json ]; then cd mobile-tests; fi;
            # sua sequência (evita quebrar se o open falhar)
            npm run report:clean || true;
            npm run test:all || npm run test:e2e || npm test;
            npm run report:gen || true;
            npm run report:open || true;
            # captura logcat antes do shutdown do emulador
            adb logcat -d > logcat.txt || true;
            # junta tudo em uma pasta única na raiz do repo
            ROOT=\"$(git rev-parse --show-toplevel 2>/dev/null || pwd)\";
            ART_DIR=\"$ROOT/ci-mobile-artifacts\";
            mkdir -p \"$ART_DIR\";
            for p in allure-results allure-report reports logs screenshots logcat.txt; do
              [ -e \"$p\" ] && cp -r \"$p\" \"$ART_DIR\"/ 2>/dev/null || true;
            done;
            echo \"Arquivos coletados:\"; find \"$ART_DIR\" -maxdepth 2 -type f | head -n 200 || true;'



      # (Opcional) Faça upload de artefatos/relatórios do mobile, se existirem
      - name: Upload mobile artifacts (logs/screenshots)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-artifacts
          path: |
            mobile-tests/reports/**
            mobile-tests/logs/**
            mobile-tests/screenshots/**
          retention-days: 7

  # =======================
  # LOAD TESTS (K6)
  # =======================

  k6_load_test:
    name: Load Test (K6)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        # (se você usa checkout com path custom, ajuste os 'working-directory' abaixo)
        uses: actions/checkout@v4

      # Debug: mostra conteúdo na raiz do repo e na pasta do K6
      - name: (debug) Repo root
        run: |
          echo "ROOT=$(pwd)"
          ls -la
          ls -la k6-load-tests || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Instala o k6 nativamente (sem Docker)
      - name: Install k6 (apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg ca-certificates
          curl -fsSL https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
          k6 version

      # Instala deps do analisador (package.json dentro de k6-load-tests)
      - name: Install analyzer deps
        working-directory: k6-load-tests
        run: npm i

      # Roda k6 exportando o summary diretamente na pasta correta
      - name: Run K6 (500 VUs / 5m) + export summary
        working-directory: k6-load-tests
        env:
          # Opcional: defina em Settings → Variables como K6_BASE_URL
          BASE_URL: ${{ vars.K6_BASE_URL }}
        run: |
          test -f src/basic_load_test.js || (echo "ERRO: src/basic_load_test.js não existe em $(pwd)"; exit 1)
          k6 run --summary-export=summary.json src/basic_load_test.js
          echo "Após k6:"
          ls -la

      - name: Generate analysis (analysis.md)
        working-directory: k6-load-tests
        run: npm run analyze

      - name: Upload K6 artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-report
          path: |
            k6-load-tests/summary.html
            k6-load-tests/summary.json
            k6-load-tests/summary.txt
            k6-load-tests/analysis.md
          retention-days: 7

