name: CI

"on":
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CI: true

jobs:
  # =======================
  # API TESTS (CYPRESS)
  # =======================
  api_tests:
    name: API (Cypress)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: api-tests/package-lock.json

      - name: Install deps
        working-directory: api-tests
        run: npm ci
        env:
          CYPRESS_REQRES_API_KEY: ${{ secrets.REQRES_API_KEY }}

      - name: Run Cypress API tests
        working-directory: api-tests
        run: npx cypress run
        env:
          CYPRESS_REQRES_API_KEY: ${{ secrets.REQRES_API_KEY }}

      - name: Upload Cypress reports (API)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-api-reports
          path: |
            api-tests/cypress/reports/**
            api-tests/cypress/screenshots/**
          retention-days: 7

  # =======================
  # E2E TESTS (CYPRESS + CUCUMBER)
  # =======================
  e2e_tests:
    name: E2E Web (Cypress + Cucumber)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: e2e-tests/package-lock.json

      - name: Install deps
        working-directory: e2e-tests
        run: npm ci

      - name: Run Cypress E2E (Cucumber)
        working-directory: e2e-tests
        run: npx cypress run --config-file cypress.config.cjs

      - name: Upload Cypress reports (E2E)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-e2e-reports
          path: |
            e2e-tests/cypress/reports/**
            e2e-tests/cypress/screenshots/**
          retention-days: 7

  # =======================
  # MOBILE TESTS (APPIUM + ANDROID EMULATOR)
  # =======================
  mobile_tests:
    name: Mobile CI (Android)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      CI: true
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      ADB_INSTALL_TIMEOUT: '20'
      ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: '20'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache AVD
        id: avd-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd
            ~/.android/adb
          key: avd-${{ runner.os }}-api-30-default-x86_64-v1

      - name: Ensure SDK & AVD (idempotent)
        shell: bash
        run: |
          set -eu  # (sem 'pipefail' para não quebrar o 'yes | ...')

             # 1) SDK e pacotes necessários
             sdkmanager --install "platform-tools" "emulator" "platforms;android-30" "system-images;android-30;default;x86_64"

             # 2) Aceita licenças; ignore erro de SIGPIPE do 'yes'
             { yes | sdkmanager --licenses >/dev/null 2>&1; } || true

             # 3) Cria AVD se não existir
             AVD_DIR="$HOME/.android/avd/ci-avd.avd"
             if [ ! -f "$AVD_DIR/config.ini" ]; then
               echo "Creating AVD ci-avd..."
               printf 'no\n' | avdmanager create avd -n ci-avd -k "system-images;android-30;default;x86_64" --device "pixel"
             else
               echo "AVD ci-avd already exists."
             fi

             # 4) Garante diretório e acrescenta configs com segurança
             mkdir -p "$AVD_DIR"
             {
               echo "hw.keyboard=yes"
               echo "showDeviceFrame=no"
             } >> "$AVD_DIR/config.ini"

      - name: Install project deps
        run: npm ci

      - name: Boot Android emulator (headless, robust)
        shell: bash
        run: |
          set -euo pipefail
          adb kill-server || true
          adb start-server

          "$ANDROID_HOME/emulator/emulator" -avd ci-avd \
            -no-snapshot -no-boot-anim -no-window -gpu swiftshader_indirect -accel off \
            -skip-adb-auth -camera-back none -camera-front none -memory 2048 >/dev/null 2>&1 &

          # Wait for ADB device (timeout ~120s)
          for i in $(seq 1 60); do
            if adb wait-for-device; then
              break
            fi
            sleep 2
          done

          # Wait for full boot (timeout ~300s)
          for i in $(seq 1 300); do
            if adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; then
              echo "Emulator booted."
              break
            fi
            sleep 1
          done

          if ! adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; then
            echo "Failed to boot emulator in time."
            adb -s emulator-5554 emu kill || true
            exit 1
          fi

          # Unlock & disable animations
          adb shell input keyevent 82 || true
          adb shell settings put global window_animation_scale 0 || true
          adb shell settings put global transition_animation_scale 0 || true
          adb shell settings put global animator_duration_scale 0 || true
          adb devices

      - name: Run mobile tests
        run: npm run test:login

      - name: Dump logcat on failure
        if: failure()
        run: adb -s emulator-5554 logcat -d | tail -n 5000 || true

      - name: Shutdown emulator
        if: always()
        run: adb -s emulator-5554 emu kill || true

  # =======================
  # LOAD TESTS (K6)
  # =======================

  k6_load_test:
    name: Load Test (K6)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: k6-load-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: (debug) Ver estrutura
        run: |
          echo "PWD=$(pwd)"
          ls -la
          ls -la src || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install analyzer deps
        run: npm i

      - name: Run K6 (500 VUs / 5m) + export summary (mounted out dir)
      env:
        BASE_URL: ${{ vars.K6_BASE_URL }} # opcional (ou remove e usa o default do script)
      run: |
        set -eu
        mkdir -p .k6-out

        # Garante que o script existe
        test -f src/basic_load_test.js || (echo "ERRO: src/basic_load_test.js não existe em $(pwd)"; exit 1)

        # Roda k6 no container e exporta o summary para uma pasta montada
        docker run --rm \
        -e BASE_URL="${BASE_URL:-}" \
        -v "$PWD":/work -w /work \
        grafana/k6:latest run \
        --summary-export=/work/.k6-out/summary.json \
        src/basic_load_test.js

        echo "Arquivos depois do k6:"
        ls -la
        echo "Arquivos em .k6-out:"
        ls -la .k6-out || true

        # Move o summary.json para o diretório onde o analyze espera
        test -f .k6-out/summary.json || (echo "ERRO: .k6-out/summary.json não foi gerado"; exit 1)
        mv .k6-out/summary.json summary.json

        - name: Generate analysis (analysis.md)
      run: npm run analyze


        - name: Upload K6 artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-report
          path: |
            k6-load-tests/summary.html
            k6-load-tests/summary.json
            k6-load-tests/summary.txt
            k6-load-tests/analysis.md
          retention-days: 7




  # =======================
  # LOAD TESTS (JMETER)
  # =======================
  load_tests:
    name: Load (JMeter)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download Apache JMeter
        run: |
          JMETER_VERSION=5.6.3
          curl -sL https://downloads.apache.org/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz -o jmeter.tgz \
          || curl -sL https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JMETER_VERSION}.tgz -o jmeter.tgz
          tar -xzf jmeter.tgz
          echo "$PWD/apache-jmeter-${JMETER_VERSION}/bin" >> $GITHUB_PATH

      - name: Run JMeter non-GUI
        run: |
          mkdir -p load-tests/results load-tests/reports
          jmeter -n \
            -t load-tests/jmeter-test-plan.jmx \
            -l load-tests/results/results.jtl \
            -e -o load-tests/reports \
            -Jjmeter.save.saveservice.output_format=csv \
            -Jjmeter.save.saveservice.assertion_results=none \
            -Jjmeter.save.saveservice.response_data.on_error=false \
            -Jjmeter.save.saveservice.bytes=true \
            -Jjmeter.save.saveservice.label=true \
            -Jjmeter.save.saveservice.latency=true \
            -Jjmeter.save.saveservice.connect_time=true \
            -Jjmeter.save.saveservice.response_code=true \
            -Jjmeter.save.saveservice.response_message=true \
            -Jjmeter.save.saveservice.successful=true \
            -Jjmeter.save.saveservice.thread_name=true \
            -Jjmeter.save.saveservice.timeStamp=true

      - name: Upload JMeter report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-report
          path: |
            load-tests/reports/**
            load-tests/results/results.jtl
          retention-days: 3
