name: CI

"on":
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CI: true

jobs:
  # =======================
  # API TESTS (CYPRESS)
  # =======================
  api_tests:
    name: API (Cypress)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: api-tests/package-lock.json

      - name: Install deps
        working-directory: api-tests
        run: npm ci
        env:
          CYPRESS_REQRES_API_KEY: ${{ secrets.REQRES_API_KEY }}

      - name: Run Cypress API tests
        working-directory: api-tests
        run: npx cypress run
        env:
          CYPRESS_REQRES_API_KEY: ${{ secrets.REQRES_API_KEY }}

      - name: Upload Cypress reports (API)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-api-reports
          path: |
            api-tests/cypress/reports/**
            api-tests/cypress/screenshots/**
          retention-days: 7

  # =======================
  # E2E TESTS (CYPRESS + CUCUMBER)
  # =======================
  e2e_tests:
    name: E2E Web (Cypress + Cucumber)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: e2e-tests/package-lock.json

      - name: Install deps
        working-directory: e2e-tests
        run: npm ci

      - name: Run Cypress E2E (Cucumber)
        working-directory: e2e-tests
        run: npx cypress run --config-file cypress.config.cjs

      - name: Upload Cypress reports (E2E)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-e2e-reports
          path: |
            e2e-tests/cypress/reports/**
            e2e-tests/cypress/screenshots/**
          retention-days: 7

  # =======================
  # MOBILE TESTS (APPIUM + ANDROID EMULATOR)
  # =======================
  mobile_tests:
    name: Mobile CI (Android)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      CI: true
      ANDROID_SDK_ROOT: /usr/local/lib/android/sdk
      ANDROID_HOME: /usr/local/lib/android/sdk
      ADB_INSTALL_TIMEOUT: '20'
      ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: '20'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache AVD
        id: avd-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd
            ~/.android/adb
          key: avd-${{ runner.os }}-api-30-default-x86_64-v1

      - name: Ensure SDK & AVD (idempotent)
        shell: bash
        run: |
          set -eu  # (sem 'pipefail' para não quebrar o 'yes | ...')

             # 1) SDK e pacotes necessários
             sdkmanager --install "platform-tools" "emulator" "platforms;android-30" "system-images;android-30;default;x86_64"

             # 2) Aceita licenças; ignore erro de SIGPIPE do 'yes'
             { yes | sdkmanager --licenses >/dev/null 2>&1; } || true

             # 3) Cria AVD se não existir
             AVD_DIR="$HOME/.android/avd/ci-avd.avd"
             if [ ! -f "$AVD_DIR/config.ini" ]; then
               echo "Creating AVD ci-avd..."
               printf 'no\n' | avdmanager create avd -n ci-avd -k "system-images;android-30;default;x86_64" --device "pixel"
             else
               echo "AVD ci-avd already exists."
             fi

             # 4) Garante diretório e acrescenta configs com segurança
             mkdir -p "$AVD_DIR"
             {
               echo "hw.keyboard=yes"
               echo "showDeviceFrame=no"
             } >> "$AVD_DIR/config.ini"

      - name: Install project deps
        run: npm ci

      - name: Boot Android emulator (robusto c/ serial e log)
        shell: bash
        run: |
          set -euxo pipefail

          # Limpa sessões anteriores
          adb kill-server || true
          pkill -f "emulator.*ci-avd" || true
          rm -f ~/.android/adb/adbkey* || true

          # Inicia emulador direcionando log
          "$ANDROID_HOME/emulator/emulator" \
            -avd ci-avd \
            -port 5554 \
            -no-snapshot -no-snapshot-save -wipe-data \
            -no-boot-anim -no-audio -no-window \
            -gpu swiftshader_indirect -accel off \
            -netdelay none -netspeed full \
            >/tmp/emulator-ci.log 2>&1 &

          echo "Aguardando dispositivo (emulator-5554)..."
          # Espera dispositivo aparecer
          if ! timeout 120s adb -s emulator-5554 wait-for-device; then
            echo "::error::Timeout esperando adb device"; tail -n 200 /tmp/emulator-ci.log || true; exit 1
          fi

          echo "Aguardando boot completo..."
          SECS=0
          until adb -s emulator-5554 shell getprop sys.boot_completed | grep -q "1"; do
            sleep 2
            SECS=$((SECS+2))
            adb devices || true
            if [ "$SECS" -ge 600 ]; then
              echo "::error::Timeout em sys.boot_completed"; tail -n 200 /tmp/emulator-ci.log || true; exit 1
            fi
          done

          # Sinais adicionais (não bloqueantes, só logam)
          adb -s emulator-5554 shell getprop dev.bootcomplete || true
          adb -s emulator-5554 shell getprop init.svc.bootanim || true

          echo "Desbloqueando e desligando animações..."
          adb -s emulator-5554 shell input keyevent 82 || true
          adb -s emulator-5554 shell settings put global window_animation_scale 0 || true
          adb -s emulator-5554 shell settings put global transition_animation_scale 0 || true
          adb -s emulator-5554 shell settings put global animator_duration_scale 0 || true

          adb -s emulator-5554 devices -l

      - name: Run emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: default
          arch: x86_64
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -no-audio
          disable-animations: true
          script: |
            npm run test:login


      - name: Run mobile tests
        run: npm run test:login

      - name: Dump logcat on failure
        if: failure()
        run: adb -s emulator-5554 logcat -d | tail -n 5000 || true

      - name: Shutdown emulator
        if: always()
        run: adb -s emulator-5554 emu kill || true

  # =======================
  # LOAD TESTS (K6)
  # =======================

  k6_load_test:
    name: Load Test (K6)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        # (se você usa checkout com path custom, ajuste os 'working-directory' abaixo)
        uses: actions/checkout@v4

      # Debug: mostra conteúdo na raiz do repo e na pasta do K6
      - name: (debug) Repo root
        run: |
          echo "ROOT=$(pwd)"
          ls -la
          ls -la k6-load-tests || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Instala o k6 nativamente (sem Docker)
      - name: Install k6 (apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg ca-certificates
          curl -fsSL https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
          k6 version

      # Instala deps do analisador (package.json dentro de k6-load-tests)
      - name: Install analyzer deps
        working-directory: k6-load-tests
        run: npm i

      # Roda k6 exportando o summary diretamente na pasta correta
      - name: Run K6 (500 VUs / 5m) + export summary
        working-directory: k6-load-tests
        env:
          # Opcional: defina em Settings → Variables como K6_BASE_URL
          BASE_URL: ${{ vars.K6_BASE_URL }}
        run: |
          test -f src/basic_load_test.js || (echo "ERRO: src/basic_load_test.js não existe em $(pwd)"; exit 1)
          k6 run --summary-export=summary.json src/basic_load_test.js
          echo "Após k6:"
          ls -la

      - name: Generate analysis (analysis.md)
        working-directory: k6-load-tests
        run: npm run analyze

      - name: Upload K6 artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-report
          path: |
            k6-load-tests/summary.html
            k6-load-tests/summary.json
            k6-load-tests/summary.txt
            k6-load-tests/analysis.md
          retention-days: 7

