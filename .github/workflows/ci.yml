name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# ✅ precisa disso para publicar no GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

env:
  CI: true

jobs:
  # =======================
  # API TESTS (CYPRESS)
  # =======================
  api_tests:
    name: API (Cypress)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: api-tests/package-lock.json

      - name: Install deps
        working-directory: api-tests
        run: npm ci
        env:
          CYPRESS_REQRES_API_KEY: ${{ secrets.REQRES_API_KEY }}

      - name: Run Cypress API tests
        working-directory: api-tests
        run: npx cypress run
        env:
          CYPRESS_REQRES_API_KEY: ${{ secrets.REQRES_API_KEY }}

      - name: Upload Cypress reports (API)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-api-reports
          path: |
            api-tests/cypress/reports/**
            api-tests/cypress/screenshots/**
          retention-days: 7

  # =======================
  # E2E TESTS (CYPRESS + CUCUMBER)
  # =======================
  e2e_tests:
    name: E2E Web (Cypress + Cucumber)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: e2e-tests/package-lock.json

      - name: Install deps
        working-directory: e2e-tests
        run: npm ci

      - name: Run Cypress E2E (Cucumber)
        working-directory: e2e-tests
        run: npx cypress run --config-file cypress.config.cjs

      - name: Upload Cypress reports (E2E)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-e2e-reports
          path: |
            e2e-tests/cypress/reports/**
            e2e-tests/cypress/screenshots/**
          retention-days: 7

  # =======================
  # MOBILE TESTS (APPIUM + ANDROID EMULATOR)
  # =======================
  mobile_tests:
    name: Mobile CI (Android)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      CI: true
      ADB_INSTALL_TIMEOUT: '20'
      ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: '20'
    # necessário para Pages (exibe a URL ao final)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: |
            package-lock.json
            mobile-tests/package-lock.json

      - name: Run mobile tests on Android emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: default
          arch: x86_64
          profile: pixel_6
          emulator-options: -no-snapshot -no-audio -no-window -no-boot-anim -gpu swiftshader_indirect
          script: |
            # aguarda serviços + boot completo e desbloqueia
            adb shell 'for i in $(seq 1 60); do cmd -l | grep -q "settings" && exit 0; sleep 1; done' || true
            adb shell 'while [ "$(getprop sys.boot_completed 2>/dev/null)" != "1" ]; do sleep 1; done; input keyevent 82' || true

            if [ -f mobile-tests/package.json ]; then npm --prefix mobile-tests ci; else npm ci; fi
            if [ -f mobile-tests/package.json ]; then npm --prefix mobile-tests run report:clean || true; else npm run report:clean || true; fi
            if [ -f mobile-tests/package.json ]; then npm --prefix mobile-tests run test:all || npm --prefix mobile-tests run test:e2e || npm --prefix mobile-tests test; else npm run test:all || npm run test:e2e || npm test; fi
            if [ -f mobile-tests/package.json ]; then npm --prefix mobile-tests run report:gen || true; else npm run report:gen || true; fi

            # não abra o Allure no CI
            if [ -z "$CI" ]; then if [ -f mobile-tests/package.json ]; then npm --prefix mobile-tests run report:open || true; else npm run report:open || true; fi; fi

            # logs (completo + filtrado do app)
            adb logcat -d > logcat.txt || true
            adb logcat -d '*:S' ActivityManager:I AndroidRuntime:E DEBUG:E System.err:E > logcat_app.txt || true

            # copia artefatos para o workspace (sem variáveis entre linhas)
            mkdir -p "${GITHUB_WORKSPACE:-$(pwd)}/ci-mobile-artifacts"
            for p in allure-results allure-report reports logs screenshots logcat.txt logcat_app.txt; do [ -e "mobile-tests/$p" ] && cp -R "mobile-tests/$p" "${GITHUB_WORKSPACE:-$(pwd)}/ci-mobile-artifacts"/ || true; [ -e "$p" ] && cp -R "$p" "${GITHUB_WORKSPACE:-$(pwd)}/ci-mobile-artifacts"/ || true; done
            # opcional: também inclui o HTML do Allure dentro do pacote geral
            [ -d "mobile-tests/reports/allure/html" ] && cp -R "mobile-tests/reports/allure/html" "${GITHUB_WORKSPACE:-$(pwd)}/ci-mobile-artifacts/allure-html" || true; [ -d "reports/allure/html" ] && cp -R "reports/allure/html" "${GITHUB_WORKSPACE:-$(pwd)}/ci-mobile-artifacts/allure-html" || true
            touch "${GITHUB_WORKSPACE:-$(pwd)}/ci-mobile-artifacts/_keep.txt"
            ls -la "${GITHUB_WORKSPACE:-$(pwd)}/ci-mobile-artifacts" || true

      - name: Upload mobile artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-artifacts
          path: ci-mobile-artifacts/**
          if-no-files-found: warn
          retention-days: 7

      - name: Upload Allure HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-html
          path: |
            mobile-tests/reports/allure/html/**
            reports/allure/html/**
          if-no-files-found: ignore
          retention-days: 7

      # ===== Publicar Allure no GitHub Pages =====
      - name: Prepare Allure for Pages
        if: always()
        run: |
          mkdir -p public/allure
          if [ -d mobile-tests/reports/allure/html ]; then
            cp -R mobile-tests/reports/allure/html/* public/allure/
          elif [ -d reports/allure/html ]; then
            cp -R reports/allure/html/* public/allure/
          fi
          [ -e public/allure/index.html ] || echo "<h1>Sem relatório</h1>" > public/allure/index.html
          ls -la public/allure || true

      - name: Setup Pages
        if: always()
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        if: always()
        id: deployment
        uses: actions/deploy-pages@v4

  # =======================
  # LOAD TESTS (K6)
  # =======================
  k6_load_test:
    name: Load Test (K6)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: (debug) Repo root
        run: |
          echo "ROOT=$(pwd)"
          ls -la
          ls -la k6-load-tests || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install k6 (apt)
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg ca-certificates
          curl -fsSL https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y k6
          k6 version

      - name: Install analyzer deps
        working-directory: k6-load-tests
        run: npm i

      - name: Run K6 (500 VUs / 5m) + export summary
        working-directory: k6-load-tests
        env:
          BASE_URL: ${{ vars.K6_BASE_URL }}
        run: |
          test -f src/basic_load_test.js || (echo "ERRO: src/basic_load_test.js não existe em $(pwd)"; exit 1)
          k6 run --summary-export=summary.json src/basic_load_test.js
          echo "Após k6:" && ls -la

      - name: Generate analysis (analysis.md)
        working-directory: k6-load-tests
        run: npm run analyze

      - name: Upload K6 artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-report
          path: |
            k6-load-tests/summary.html
            k6-load-tests/summary.json
            k6-load-tests/summary.txt
            k6-load-tests/analysis.md
          retention-days: 7
